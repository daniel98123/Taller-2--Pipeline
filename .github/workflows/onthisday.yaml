name: OnThisDay PDF Export

on:
  workflow_dispatch:
    inputs:
      month:
        description: 'Mes en formato MM'
        required: true
      day:
        description: 'DÃ­a en formato DD'
        required: true

env:
  LANG: ${{ vars.LANG }}  # Variable de repositorio (no secret)

jobs:
  fetch-events:
    runs-on: ubuntu-latest
    steps:
      - name: Set cache key
        id: vars
        run: echo "CACHE_KEY=${{ env.LANG }}-${{ github.event.inputs.month }}-${{ github.event.inputs.day }}" >> $GITHUB_ENV

      - name: Restore API cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ./api_response.json
          key: ${{ env.CACHE_KEY }}

      - name: Fetch API response
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -s "https://api.wikimedia.org/feed/v1/wikipedia/${{ env.LANG }}/onthisday/selected/${{ github.event.inputs.month }}/${{ github.event.inputs.day }}" \
            -H "User-Agent: GitHubAction/1.0" \
            -o api_response.json

      - name: Upload API response as artifact (debug)
        uses: actions/upload-artifact@v4
        with:
          name: api-response
          path: api_response.json
          retention-days: 1

      - name: Extract events count and matrix
        id: extract
        shell: bash
        run: |
          set -euo pipefail
          test -f api_response.json || { echo "matrix=[]" >> "$GITHUB_OUTPUT"; exit 0; }
          count=$(jq '(.selected // []) | length' api_response.json)
          echo "EVENTS_COUNT=$count" >> "$GITHUB_ENV"
          matrix=$(jq -c '[(.selected // [])[] 
              | {title: (.pages[0].title // "Untitled"),
                 url:   (.pages[0].content_urls.desktop.page // "")}]' api_response.json)
          printf 'matrix=%s\n' "$matrix" >> "$GITHUB_OUTPUT"

    outputs:
      matrix: ${{ steps.extract.outputs.matrix }}

  generate-pdfs:
    needs: fetch-events
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        event: ${{ fromJson(needs.fetch-events.outputs.matrix) }}

    steps:
      - name: Install wkhtmltopdf (with xvfb)
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb wkhtmltopdf

      - name: Generate PDF from URL
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ matrix.event.url }}" ]; then
            echo "No URL, skipping."
            exit 0
          fi
          xvfb-run -a wkhtmltopdf \
            --print-media-type \
            --enable-javascript \
            --javascript-delay 2000 \
            "${{ matrix.event.url }}" event.pdf

      - name: Rename PDF
        id: rename
        if: success() && hashFiles('event.pdf') != ''
        run: |
          safe_title=$(echo "${{ matrix.event.title }}" | tr ' ' '_' | tr -cd '[:alnum:]_-')
          new_name="${{ github.event.inputs.month }}-${{ github.event.inputs.day }}-${safe_title}.pdf"
          mv event.pdf "$new_name"
          echo "SAFE_TITLE=$safe_title" >> "$GITHUB_OUTPUT"
          echo "PDF_NAME=$new_name" >> "$GITHUB_OUTPUT"

      - name: Upload PDF artifact
        if: success() && steps.rename.outputs.PDF_NAME != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.month }}-${{ github.event.inputs.day }}-${{ steps.rename.outputs.SAFE_TITLE }}
          path: ${{ steps.rename.outputs.PDF_NAME }}
          retention-days: 1
